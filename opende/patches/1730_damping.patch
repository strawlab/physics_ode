Index: include/ode/objects.h
===================================================================
--- include/ode/objects.h	(revision 1730)
+++ include/ode/objects.h	(working copy)
@@ -1722,6 +1722,12 @@
 ODE_API void dJointSetData (dJointID, void *data);
 
 /**
+ * @brief Set the user-data pointer
+ * @ingroup joints
+ */
+ODE_API void dJointSetDamping (dJointID, dReal damping);
+
+/**
  * @brief Get the user-data pointer
  * @ingroup joints
  */
Index: ode/src/quickstep.cpp
===================================================================
--- ode/src/quickstep.cpp	(revision 1730)
+++ ode/src/quickstep.cpp	(working copy)
@@ -63,6 +63,8 @@
 
 #define RANDOMLY_REORDER_CONSTRAINTS 1
 
+#define USE_JOINT_DAMPING
+
 //****************************************************************************
 // special matrix multipliers
 
@@ -343,7 +345,12 @@
   const int m, const int nb, dRealMutablePtr J, int *jb, dxBody * const *body,
   dRealPtr invI, dRealMutablePtr lambda, dRealMutablePtr fc, dRealMutablePtr b,
   dRealPtr lo, dRealPtr hi, dRealPtr cfm, const int *findex,
-  const dxQuickStepParameters *qs)
+  const dxQuickStepParameters *qs,
+#ifdef USE_JOINT_DAMPING
+  const int m_damp,dRealMutablePtr J_damp, dRealPtr coeff_damp, int *jb_damp,dRealMutablePtr v_damp,
+  dRealMutablePtr f_damp,dRealMutablePtr v_joint_damp, dRealPtr JiM, // damping related
+#endif
+  const dReal stepsize) // for updating v_damp along the way
 {
 #ifdef WARM_STARTING
   {
@@ -384,6 +391,14 @@
     }
   }
 
+
+  /********************************/
+  /* allocate for J*invM*f_damp   */
+  /* which is a mX1 column vector */
+  /********************************/
+  dReal *Adcfm = context->AllocateArray<dReal> (m);
+
+
   {
     // NOTE: This may seem unnecessary but it's indeed an optimization 
     // to move multiplication by Ad[i] and cfm[i] out of iteration loop.
@@ -397,7 +412,7 @@
       }
       b[i] *= Ad_i;
       // scale Ad by CFM. N.B. this should be done last since it is used above
-      Ad[i] = Ad_i * cfm[i];
+      Adcfm[i] = Ad_i * cfm[i];
     }
   }
 
@@ -430,6 +445,10 @@
   dReal *last_lambda = context->AllocateArray<dReal> (m);
 #endif
 
+#ifdef USE_JOINT_DAMPING
+  dReal *b_damp = context->AllocateArray<dReal> (m);
+#endif
+
   const int num_iterations = qs->num_iterations;
   for (int iteration=0; iteration < num_iterations; iteration++) {
 
@@ -500,10 +519,52 @@
         fc_ptr2 = (b2 >= 0) ? fc + 6*b2 : NULL;
       }
 
+#ifdef USE_JOINT_DAMPING
+      /*************************************************************/
+      /* compute b_damp                                            */
+      /* b is to be modified by b_damp                             */
+      /* where b_damp = -J*inv(M)*f_damp / Ad  (since b is rhs/Ad) */
+      /*                                                           */
+      /* initially f_damp is 0, so motion is undamped on first     */
+      /* iteration.                                                */
+      /*                                                           */
+      /*************************************************************/
+      {
+        b_damp[index] = 0;
+        int b1 = jb[index*2];
+        int b2 = jb[index*2+1];
+        dRealMutablePtr f_damp_ptr1 = f_damp + 6*b1;
+        dRealMutablePtr f_damp_ptr2 = (b2 >= 0) ? f_damp + 6*b2 : NULL;
+   
+        dRealPtr JiM_ptr = JiM + index*12;
+
+        // compute b_damp = JiM * f_damp, b_damp is preset to zero already
+        for (int j=0;j<6;j++) {
+          b_damp[index] += JiM_ptr[j] * f_damp_ptr1[j];
+          if (b2>=0) b_damp[index] += JiM_ptr[j+6] * f_damp_ptr2[j];
+        }
+   
+        // and scale JiM by Ad
+        b_damp[index] *= Ad[index];
+        // FIXME: find some kind of limiters that works as artificial dampers
+        // b_damp must make b smaller
+        // so b_damp must have opposite sign as b
+        // and abs(b_damp) < abs(b)
+        //if (b_damp[index]*b[index]>0) b_damp[index]=0;
+        //if (dFabs(b_damp[index])>dFabs(b[index])) b_damp[index]=-b[index];
+      }
+#endif
+
       dReal old_lambda = lambda[index];
 
       {
-        delta = b[index] - old_lambda*Ad[index];
+        delta = b[index] - old_lambda*Adcfm[index];
+#ifdef USE_JOINT_DAMPING
+        /***************************************************************************/
+        /* b is to be modified by b_damp = -J*inv(M)*f_damp / Ad since b is rhs/Ad */
+        /***************************************************************************/
+        delta += b_damp[index];
+#endif
 
         dRealPtr J_ptr = J + index*12;
         // @@@ potential optimization: SIMD-ize this and the b2 >= 0 case
@@ -579,8 +640,89 @@
           fc_ptr2[5] += delta * iMJ_ptr[11];
         }
       }
+
+    } // end of for loop on m
+
+#ifdef USE_JOINT_DAMPING
+    /****************************************************************/
+    /* compute v_damp per fc update                                 */
+    /*   based on all external forces fe, fc, f_damp                */
+    /*   v_damp should have started out same as v(n)                */
+    /*   v_damp should end up being v(n+1)                          */
+    /*                                                              */
+    /*  v_damp = v_current + stepsize * invM * f_all                */
+    /*                                                              */
+    /****************************************************************/
+    {
+      IFTIMING (dTimerNow ("velocity update due to f_damp"));
+      const dReal *invIrow = invI;
+      dRealMutablePtr f_damp_ptr = f_damp;
+      dRealMutablePtr v_damp_ptr = v_damp;
+      dxBody *const *const bodyend = body + nb;
+      const dReal *fc_ptr = fc;
+
+      for (dxBody *const *bodycurr = body; bodycurr != bodyend; fc_ptr+=6, invIrow += 12, f_damp_ptr+=6, v_damp_ptr+=6, bodycurr++) {
+        // f_damp should be updated in SOR LCP
+
+        // compute the velocity update:
+        // add stepsize * invM * f_damp to the body velocity
+        dxBody *b = *bodycurr;
+        dReal body_invMass_mul_stepsize = stepsize * b->invMass;
+        dReal tmp3[3];
+        for (int j=0; j<3; j++) {
+          // note that cforce(fc) is really not a force but an acceleration, hence there is
+          // no premultiplying of invM here (compare to update due to external force 'facc' below)
+          // add stepsize * cforce(fc) to the body velocity
+          v_damp_ptr[j]   = b->lvel[j] + stepsize * fc_ptr[j]   + body_invMass_mul_stepsize * ( b->facc[j] + f_damp_ptr[j] );
+          v_damp_ptr[j+3] = b->avel[j] + stepsize * fc_ptr[j+3];
+
+          // accumulate step*torques
+          tmp3[j] = stepsize*(b->tacc[j] + f_damp_ptr[j+3]);
+        }
+        // v_damp = invI * f_damp
+        dMultiplyAdd0_331 (v_damp_ptr+3, invIrow, tmp3);
+
+      }
     }
-  }
+
+    /****************************************************************/
+    /* compute f_damp per v_damp update                             */
+    /* compute damping force f_damp = J_damp' * B * J_damp * v_damp */
+    /*                                                              */
+    /*  we probably want to apply some kind of limiter on f_damp    */
+    /*  based on changes in v_damp.                                 */
+    /*                                                              */
+    /*  for starters, ramp up damping to increase stability.        */
+    /*                                                              */
+    /****************************************************************/
+    {
+      dSetZero (f_damp,6*nb); // reset f_damp, following update skips around, so cannot set to 0 inline
+      dRealPtr J_damp_ptr = J_damp;
+      // compute f_damp and velocity updates
+      // first compute v_joint_damp = J_damp * v_damp
+      // v_joint_damp is m_damp X 1 single column vector
+      for (int j=0; j<m_damp;J_damp_ptr+=12, j++) {
+        int b1 = jb_damp[j*2];
+        int b2 = jb_damp[j*2+1];
+        v_joint_damp[j] = 0;
+        // ramp-up
+        dReal alpha = (dReal)iteration / (dReal)num_iterations;
+        for (int k=0;k<6;k++) v_joint_damp[j] += J_damp_ptr[k] * v_damp[b1*6+k];
+        if (b2 >= 0) for (int k=0;k<6;k++) v_joint_damp[j] += J_damp_ptr[k+6] * v_damp[b2*6+k];
+        // multiply by damping coefficients (B is diagnoal)
+        v_joint_damp[j] *= alpha * coeff_damp[j];
+
+        // so now v_joint_damp = B * J_damp * v_damp
+        // update f_damp = J_damp' * v_joint_damp
+        for (int k=0; k<6; k++) f_damp[b1*6+k] -= J_damp_ptr[k]*v_joint_damp[j];
+        if (b2 >= 0) for (int k=0; k<6; k++) f_damp[b2*6+k] -= J_damp_ptr[6+k]*v_joint_damp[j];
+      }
+
+    }
+#endif
+
+
+  } // end of for loop on iterations
 }
 
 struct dJointWithInfo1
@@ -630,7 +772,21 @@
     }
   }
 
+  // get the masses for every body
+  dReal *invM = context->AllocateArray<dReal> (nb);
   {
+    dReal *invMrow = invM;
+    dxBody *const *const bodyend = body + nb;
+    for (dxBody *const *bodycurr = body; bodycurr != bodyend; invMrow++, bodycurr++) {
+      dxBody *b = *bodycurr;
+      //*invMrow = b->mass.mass;
+      *invMrow = b->invMass;
+
+    }
+  }
+
+
+  {
     // add the gravity force to all bodies
     // since gravity does normally have only one component it's more efficient
     // to run three loops for each individual component
@@ -705,9 +861,40 @@
     mfb = mfbcurr;
   }
 
+#ifdef USE_JOINT_DAMPING
+  /************************************************************************/
+  /* for joint damping, get the total number of rows for damping jacobian */
+  /************************************************************************/
+  int m_damp; // number of rows for damped joint jacobian
+  {
+    int mcurr = 0;
+    const dJointWithInfo1 *jicurr = jointiinfos; // info1 stored in jointiinfos
+    const dJointWithInfo1 *const jiend = jicurr + nj;
+    for (; jicurr != jiend; jicurr++)
+      if (jicurr->joint->use_damping)
+        mcurr ++;
+
+    m_damp = mcurr;
+  }
+#endif
+
   // if there are constraints, compute the constraint force
   dReal *J = NULL;
   int *jb = NULL;
+
+#ifdef USE_JOINT_DAMPING
+  /*********************************/
+  /* do the same for damped joints */
+  /*********************************/
+  dReal *v_damp;
+  dReal *J_damp = NULL;
+  dReal *v_joint_damp = NULL;
+  dReal* f_damp = NULL;
+  dReal *JiM = NULL;
+  int *jb_damp = NULL;
+  dReal *coeff_damp = NULL;
+#endif
+
   if (m > 0) {
     dReal *cfm, *lo, *hi, *rhs, *Jcopy;
     int *findex;
@@ -740,8 +927,49 @@
       rhs = context->AllocateArray<dReal> (mlocal);
 
       Jcopy = context->AllocateArray<dReal> (mfb*12);
+
+#ifdef USE_JOINT_DAMPING
+      JiM = context->AllocateArray<dReal> (mlocal*12); // for computing b_damp
+      dSetZero (JiM,jelements);
+#endif
     }
 
+#ifdef USE_JOINT_DAMPING
+    /*********************************/
+    /* for damped joints             */
+    /*********************************/
+    {
+      int mlocal = m_damp;
+
+      const unsigned jelements = mlocal*12;
+      J_damp = context->AllocateArray<dReal> (jelements);
+      dSetZero (J_damp,jelements);
+
+      // v_joint = J_damp * v
+      // v_joint is the velocity of the joint in joint space
+      // (relative angular rates of attached bodies)
+      const unsigned v_joint_damp_elements = mlocal;
+      v_joint_damp = context->AllocateArray<dReal> (v_joint_damp_elements);
+      dSetZero (v_joint_damp,v_joint_damp_elements);
+
+      // jb is the body index for each jacobian
+      const unsigned jbelements = mlocal*2;
+      jb_damp = context->AllocateArray<int> (jbelements);
+
+      const unsigned f_damp_elements = nb*6;
+      f_damp = context->AllocateArray<dReal> (f_damp_elements);
+      dSetZero (f_damp,f_damp_elements);
+
+      const unsigned v_damp_elements = nb*6;
+      v_damp = context->AllocateArray<dReal> (v_damp_elements);
+      dSetZero (v_damp,v_damp_elements);
+
+      const unsigned coeffelements = mlocal;
+      coeff_damp = context->AllocateArray<dReal> (coeffelements);
+      dSetZero (coeff_damp,coeffelements);
+    }
+#endif
+
     BEGIN_STATE_SAVE(context, cstate) {
       dReal *c = context->AllocateArray<dReal> (m);
       dSetZero (c, m);
@@ -768,6 +996,9 @@
 
         dReal *Jcopyrow = Jcopy;
         unsigned ofsi = 0;
+#ifdef USE_JOINT_DAMPING
+        unsigned ofsi_damp = 0; // for joint damping
+#endif
         const dJointWithInfo1 *jicurr = jointiinfos;
         const dJointWithInfo1 *const jiend = jicurr + nj;
         for (; jicurr != jiend; jicurr++) {
@@ -781,7 +1012,32 @@
           Jinfo.lo = lo + ofsi;
           Jinfo.hi = hi + ofsi;
           Jinfo.findex = findex + ofsi;
+
+
+
+#ifdef USE_JOINT_DAMPING
+          /*******************************************************/
+          /*  allocate space for damped joint Jacobians          */
+          /*******************************************************/
+          if (jicurr->joint->use_damping)
+          {
+            // damping coefficient is in jicurr->info.damping_coefficient);
+            coeff_damp[ofsi_damp] = jicurr->joint->damping_coefficient;
+
+            // setup joint damping pointers so getinfo2 will fill in J_damp
+            dReal *const Jrow_damp = J_damp + ofsi_damp * 12;
+            Jinfo.J1ld = Jrow_damp;
+            Jinfo.J1ad = Jrow_damp + 3;
+            Jinfo.J2ld = Jrow_damp + 6;
+            Jinfo.J2ad = Jrow_damp + 9;
+            // one row of constraint per joint
+            ofsi_damp ++;
+          }
+#endif
+
+
           
+          // now write all information into J
           dxJoint *joint = jicurr->joint;
           joint->getInfo2 (&Jinfo);
 
@@ -829,6 +1085,35 @@
         dIASSERT (jb_ptr == jb+2*m);
       }
 
+#ifdef USE_JOINT_DAMPING
+      {
+        /*************************************************************/
+        /* create an array of body numbers for each damped joint row */
+        /*************************************************************/
+        int *jb_damp_ptr = jb_damp;
+        const dJointWithInfo1 *jicurr = jointiinfos;
+        const dJointWithInfo1 *const jiend = jicurr + nj;
+        for (; jicurr != jiend; jicurr++) {
+          if (jicurr->joint->use_damping)
+          {
+            dxJoint *joint = jicurr->joint;
+            const int infom = 1; // one damping jacobian row per hinge joint
+
+            int b1 = (joint->node[0].body) ? (joint->node[0].body->tag) : -1;
+            int b2 = (joint->node[1].body) ? (joint->node[1].body->tag) : -1;
+            for (int j=0; j<infom; j++) {
+              jb_damp_ptr[0] = b1;
+              jb_damp_ptr[1] = b2;
+              jb_damp_ptr += 2;
+            }
+          }
+        }
+        dIASSERT (jb_damp_ptr == jb_damp+2*m_damp);
+      }
+#endif
+
+
+
       BEGIN_STATE_SAVE(context, tmp1state) {
         IFTIMING (dTimerNow ("compute rhs"));
         // compute the right hand side `rhs'
@@ -847,6 +1132,40 @@
 
         // put J*tmp1 into rhs
         multiply_J (m,J,jb,tmp1,rhs);
+
+#ifdef USE_JOINT_DAMPING
+        /*************************************************************/
+        /* compute J*inv(M) here JiM, it does not change             */
+        /* where b_damp = -J*inv(M)*f_damp / Ad  (since b is rhs/Ad) */
+        /* and b is to be modified by b_damp                         */
+        /*************************************************************/
+        {
+          dRealPtr J_ptr = J;
+          dRealMutablePtr JiM_ptr = JiM; // intermediate solution storage
+          for (int i=0; i<m;J_ptr+=12,JiM_ptr+=12, i++) {
+
+            // compute JiM = J * invM
+            int b1 = jb[i*2];
+            int b2 = jb[i*2+1];
+            dReal k1 = body[b1]->invMass;
+
+            for (int j=0; j<3 ; j++) JiM_ptr[j] = J_ptr[j]*k1;
+
+
+            const dReal *invI_ptr1 = invI + 12*b1;
+            for (int j=0;j<3;j++) for (int k=0;k<3;k++){
+              JiM_ptr[3+j] += J_ptr[3+k]*invI_ptr1[k*4+j];
+            }
+
+            if (b2 >= 0){
+              dReal k2 = body[b2]->invMass;
+              for (int j=0; j<3 ; j++) JiM_ptr[j+6] += k2*J_ptr[j+6];
+              const dReal *invI_ptr2 = invI + 12*b2;
+              for (int j=0;j<3;j++) for (int k=0;k<3;k++) JiM_ptr[9+j] += J_ptr[9+k]*invI_ptr2[k*4+j];
+            }
+          }
+        }
+#endif
       
       } END_STATE_SAVE(context, tmp1state);
 
@@ -858,6 +1177,29 @@
 
     } END_STATE_SAVE(context, cstate);
 
+
+#ifdef USE_JOINT_DAMPING
+    /***************************************************************************/
+    /* create a nb*6 by 1 vector (v_damp) to store estimated implicit velocity */
+    /*  as it is updated in the iterative loop                                 */
+    /***************************************************************************/
+    {
+      // allocate v_damp
+      dRealMutablePtr v_damp_ptr = v_damp;
+      dxBody *const *const bodyend = body + nb;
+      for (dxBody *const *bodycurr = body; bodycurr != bodyend; v_damp_ptr+=6, bodycurr++) {
+        dxBody *b = *bodycurr;
+        v_damp_ptr[0] = b->lvel[0];
+        v_damp_ptr[1] = b->lvel[1];
+        v_damp_ptr[2] = b->lvel[2];
+        v_damp_ptr[3] = b->avel[0];
+        v_damp_ptr[4] = b->avel[1];
+        v_damp_ptr[5] = b->avel[2];
+      }
+    }
+#endif
+
+
     // load lambda from the value saved on the previous iteration
     dReal *lambda = context->AllocateArray<dReal> (m);
 
@@ -874,12 +1216,19 @@
     }
 #endif
 
+
+
     dReal *cforce = context->AllocateArray<dReal> (nb*6);
 
+
     BEGIN_STATE_SAVE(context, lcpstate) {
       IFTIMING (dTimerNow ("solving LCP problem"));
       // solve the LCP problem and get lambda and invM*constraint_force
-      SOR_LCP (context,m,nb,J,jb,body,invI,lambda,cforce,rhs,lo,hi,cfm,findex,&world->qs);
+      SOR_LCP (context,m,nb,J,jb,body,invI,lambda,cforce,rhs,lo,hi,cfm,findex,&world->qs,
+#ifdef USE_JOINT_DAMPING
+               m_damp,J_damp,coeff_damp,jb_damp,v_damp,f_damp,v_joint_damp,JiM,
+#endif
+               stepsize);
 
     } END_STATE_SAVE(context, lcpstate);
 
@@ -899,10 +1248,42 @@
     }
 #endif
 
+#ifdef USE_JOINT_DAMPING
+    /****************************************************************/
+    /* perform velocity update due to damping force                 */
+    /*  v_new = n_old + stepsize * invM * f_damp                    */
+    /****************************************************************/
+    {
+      const dReal *invIrow = invI;
+      IFTIMING (dTimerNow ("velocity update due to f_damp"));
+
+      dRealMutablePtr f_damp_ptr = f_damp;
+      dxBody *const *const bodyend = body + nb;
+      for (dxBody *const *bodycurr = body; bodycurr != bodyend; invIrow += 12, f_damp_ptr+=6, bodycurr++) {
+        // f_damp should be updated in SOR LCP
+
+        // compute the velocity update:
+        // add stepsize * invM * f_damp to the body velocity
+        dxBody *b = *bodycurr;
+        dReal body_invMass_mul_stepsize = stepsize * b->invMass;
+        for (int j=0; j<3; j++) {
+          b->lvel[j] += body_invMass_mul_stepsize * f_damp_ptr[j];
+          f_damp_ptr[3+j] *= stepsize; // multiply torque part by step size
+        }
+        dMultiplyAdd0_331 (b->avel, invIrow, f_damp_ptr+3);
+      }
+
+    }
+#endif
+
+
     // note that the SOR method overwrites rhs and J at this point, so
     // they should not be used again.
-
     {
+      IFTIMING (dTimerNow ("velocity update due to constraint forces"));
+      // note that cforce is really not a force but an acceleration, hence there is
+      // no premultiplying of invM here (compare to update due to external force 'facc' below)
+      //
       // add stepsize * cforce to the body velocity
       const dReal *cforcecurr = cforce;
       dxBody *const *const bodyend = body + nb;
@@ -1033,14 +1414,22 @@
 }
 #endif
 
-static size_t EstimateSOR_LCPMemoryRequirements(int m)
+static size_t EstimateSOR_LCPMemoryRequirements(int m
+#ifdef USE_JOINT_DAMPING
+                                               ,int m_damp
+#endif
+                                               )
 {
   size_t res = dEFFICIENT_SIZE(sizeof(dReal) * 12 * m); // for iMJ
   res += dEFFICIENT_SIZE(sizeof(dReal) * m); // for Ad
+  res += dEFFICIENT_SIZE(sizeof(dReal) * m); // for Adcfm
   res += dEFFICIENT_SIZE(sizeof(IndexError) * m); // for order
 #ifdef REORDER_CONSTRAINTS
   res += dEFFICIENT_SIZE(sizeof(dReal) * m); // for last_lambda
 #endif
+#ifdef USE_JOINT_DAMPING
+  res += dEFFICIENT_SIZE(sizeof(dReal) * m); // for b_damp
+#endif
   return res;
 }
 
@@ -1069,9 +1458,28 @@
     nj = njcurr; m = mcurr; mfb = mfbcurr;
   }
 
+#ifdef USE_JOINT_DAMPING
+  int m_damp;
+  {
+    int m_dampcurr = 0;
+    dxJoint::SureMaxInfo info;
+    dxJoint *const *const _jend = _joint + _nj;
+    for (dxJoint *const *_jcurr = _joint; _jcurr != _jend; _jcurr++) {
+      dxJoint *j = *_jcurr;
+      /***************************/
+      /* size for damping joints */
+      /***************************/
+      if (j->use_damping)
+        m_dampcurr ++;
+    }
+    m_damp = m_dampcurr;
+  }
+#endif
+
   size_t res = 0;
 
   res += dEFFICIENT_SIZE(sizeof(dReal) * 3 * 4 * nb); // for invI
+  res += dEFFICIENT_SIZE(sizeof(dReal) * nb); // for invM
 
   {
     size_t sub1_res1 = dEFFICIENT_SIZE(sizeof(dJointWithInfo1) * _nj); // for initial jointiinfos
@@ -1079,10 +1487,20 @@
     size_t sub1_res2 = dEFFICIENT_SIZE(sizeof(dJointWithInfo1) * nj); // for shrunk jointiinfos
     if (m > 0) {
       sub1_res2 += dEFFICIENT_SIZE(sizeof(dReal) * 12 * m); // for J
-      sub1_res2 += dEFFICIENT_SIZE(sizeof(int) * 12 * m); // for jb
       sub1_res2 += 4 * dEFFICIENT_SIZE(sizeof(dReal) * m); // for cfm, lo, hi, rhs
+      sub1_res2 += dEFFICIENT_SIZE(sizeof(int) * 12 * m); // for jb            FIXME: shoulbe be 2 not 12?
       sub1_res2 += dEFFICIENT_SIZE(sizeof(int) * m); // for findex
       sub1_res2 += dEFFICIENT_SIZE(sizeof(dReal) * 12 * mfb); // for Jcopy
+
+#ifdef USE_JOINT_DAMPING
+      sub1_res2 += dEFFICIENT_SIZE(sizeof(dReal) * 12 * m_damp); // for J_damp
+      sub1_res2 += dEFFICIENT_SIZE(sizeof(dReal) * m_damp ); // for v_joint_damp
+      sub1_res2 += dEFFICIENT_SIZE(sizeof(int) * 12 * m_damp); // for jb_damp            FIXME: shoulbe be 2 not 12?
+      sub1_res2 += dEFFICIENT_SIZE(sizeof(dReal) * 6 * nb); // for f_damp
+      sub1_res2 += dEFFICIENT_SIZE(sizeof(dReal) * 12*m); // for JiM
+      sub1_res2 += dEFFICIENT_SIZE(sizeof(dReal) * 6 * nb); // for v_damp
+      sub1_res2 += dEFFICIENT_SIZE(sizeof(dReal) * m_damp); // for coeff_damp
+#endif
       {
         size_t sub2_res1 = dEFFICIENT_SIZE(sizeof(dReal) * m); // for c
         {
@@ -1096,7 +1514,11 @@
         size_t sub2_res2 = dEFFICIENT_SIZE(sizeof(dReal) * m); // for lambda
         sub2_res2 += dEFFICIENT_SIZE(sizeof(dReal) * 6 * nb); // for cforce
         {
-          size_t sub3_res1 = EstimateSOR_LCPMemoryRequirements(m); // for SOR_LCP
+          size_t sub3_res1 = EstimateSOR_LCPMemoryRequirements(m
+#ifdef USE_JOINT_DAMPING
+                                                              ,m_damp
+#endif
+                                                              ); // for SOR_LCP
 
           size_t sub3_res2 = 0;
 #ifdef CHECK_VELOCITY_OBEYS_CONSTRAINT
Index: ode/src/joints/slider.cpp
===================================================================
--- ode/src/joints/slider.cpp	(revision 1730)
+++ ode/src/joints/slider.cpp	(working copy)
@@ -142,6 +142,10 @@
             info->m = 6;
         }
     }
+
+    // joint damping
+    if ( use_damping )
+      info->m = 6;
 }
 
 
@@ -224,6 +228,22 @@
 
     // if the slider is powered, or has joint limits, add in the extra row
     limot.addLimot ( this, info, 5, ax1, 0 );
+
+    // joint damping
+    if (this->use_damping)
+    {
+      // added J1ld and J2ld for damping, only 1 row
+      info->J1ld[0] = ax1[0];
+      info->J1ld[1] = ax1[1];
+      info->J1ld[2] = ax1[2];
+      if ( this->node[1].body )
+      {
+        info->J2ld[0] = -ax1[0];
+        info->J2ld[1] = -ax1[1];
+        info->J2ld[2] = -ax1[2];
+      }
+      // there's no rhs for damping setup, all we want to use is the jacobian information above
+    }
 }
 
 
Index: ode/src/joints/joint.h
===================================================================
--- ode/src/joints/joint.h	(revision 1730)
+++ ode/src/joints/joint.h	(working copy)
@@ -94,6 +94,10 @@
         // J2xx pointers may be 0.
         dReal *J1l, *J1a, *J2l, *J2a;
 
+        // jacobians for joint damping
+        // angular ones are implemented first
+        dReal *J1ld, *J1ad, *J2ld, *J2ad;
+
         // elements to jump from one row to the next in J's
         int rowskip;
 
@@ -155,6 +159,12 @@
 	// Test if this joint should be used in the simulation step
 	// (has the enabled flag set, and is attached to at least one dynamic body)
 	bool isEnabled() const;
+
+    // to use joint damping set use_damping to true
+    // and set damping_coefficient to the desired value
+    bool use_damping;
+    dReal damping_coefficient;
+
 };
 
 
Index: ode/src/joints/joint.cpp
===================================================================
--- ode/src/joints/joint.cpp	(revision 1730)
+++ ode/src/joints/joint.cpp	(working copy)
@@ -57,6 +57,10 @@
 
     w->nj++;
     feedback = 0;
+
+    // joint damping
+    use_damping = false;
+    damping_coefficient = 0.0;
 }
 
 dxJoint::~dxJoint()
Index: ode/src/joints/hinge.cpp
===================================================================
--- ode/src/joints/hinge.cpp	(revision 1730)
+++ ode/src/joints/hinge.cpp	(working copy)
@@ -70,6 +70,9 @@
         if ( limot.testRotationalLimit( angle ) )
             info->m = 6;
     }
+    // joint damping
+    if ( use_damping )
+      info->m = 6;
 }
 
 
@@ -146,6 +149,22 @@
 
     // if the hinge is powered, or has joint limits, add in the stuff
     limot.addLimot( this, info, 5, ax1, 1 );
+
+    // joint damping
+    if (this->use_damping)
+    {
+      // added J1ad and J2ad for damping, only 1 row
+      info->J1ad[0] = ax1[0];
+      info->J1ad[1] = ax1[1];
+      info->J1ad[2] = ax1[2];
+      if ( this->node[1].body )
+      {
+        info->J2ad[0] = -ax1[0];
+        info->J2ad[1] = -ax1[1];
+        info->J2ad[2] = -ax1[2];
+      }
+      // there's no rhs for damping setup, all we want to use is the jacobian information above
+    }
 }
 
 
Index: ode/src/ode.cpp
===================================================================
--- ode/src/ode.cpp	(revision 1730)
+++ ode/src/ode.cpp	(working copy)
@@ -1454,7 +1454,20 @@
   joint->feedback = f;
 }
 
+void dJointSetDamping (dxJoint *joint, dReal damping)
+{
+  dAASSERT (joint);
 
+  if (damping > 0.0)
+  {
+    // set use_damping to true
+    joint->use_damping = true;
+    // damping coefficient is in jicurr->info.damping_coefficient);
+    joint->damping_coefficient = damping;
+    // FIXME: only hinge joint and slider are implemented at this time
+  }
+}
+
 dJointFeedback *dJointGetFeedback (dxJoint *joint)
 {
   dAASSERT (joint);
Index: ode/src/step.cpp
===================================================================
--- ode/src/step.cpp	(revision 1730)
+++ ode/src/step.cpp	(working copy)
@@ -31,10 +31,13 @@
 #include "joints/joint.h"
 #include "lcp.h"
 #include "util.h"
+#include "joints/hinge.h"
 
 //****************************************************************************
 // misc defines
 
+#define USE_JOINT_DAMPING
+
 //#define TIMING
 
 
@@ -425,6 +428,24 @@
     m = mcurr;
   }
 
+
+#ifdef USE_JOINT_DAMPING
+  /************************************************************************/
+  /* for joint damping, get the total number of rows for damping jacobian */
+  /************************************************************************/
+  int m_damp; // number of rows for damped joint jacobian
+  {
+    int mcurr = 0;
+    const dJointWithInfo1 *jicurr = jointiinfos; // info1 stored in jointiinfos
+    const dJointWithInfo1 *const jiend = jicurr + nj;
+    for (; jicurr != jiend; jicurr++)
+      if (jicurr->joint->use_damping)
+        mcurr ++;
+
+    m_damp = mcurr;
+  }
+#endif
+
   // this will be set to the force due to the constraints
   dReal *cforce = context->AllocateArray<dReal> (nb*8);
   dSetZero (cforce,nb*8);
@@ -460,6 +481,23 @@
       dSetZero (rhs,mlocal);
     }
 
+#ifdef USE_JOINT_DAMPING
+    dReal *J_damp = NULL;
+    dReal *coeff_damp = NULL;
+    {
+      int mlocal = m_damp;
+
+      const unsigned jelements = mlocal*12;
+      J_damp = context->AllocateArray<dReal> (jelements);
+      dSetZero (J_damp,jelements);
+
+      const unsigned coeffelements = mlocal;
+      coeff_damp = context->AllocateArray<dReal> (coeffelements);
+      dSetZero (coeff_damp,coeffelements);
+    }
+#endif
+
+
     // Put 'c' in the same memory as 'rhs' as they transit into each other
     dReal *c = rhs; rhs = NULL; // erase rhs pointer for now as it is not to be used yet
 
@@ -496,6 +534,9 @@
         Jinfo.erp = world->global_erp;
 
         unsigned ofsi = 0;
+#ifdef USE_JOINT_DAMPING
+        unsigned ofsi_damp = 0;
+#endif
         const dJointWithInfo1 *jicurr = jointiinfos;
         const dJointWithInfo1 *const jiend = jicurr + nj;
         for (; jicurr != jiend; ++jicurr) {
@@ -511,7 +552,27 @@
           Jinfo.lo = lo + ofsi;
           Jinfo.hi = hi + ofsi;
           Jinfo.findex = findex + ofsi;
-          
+
+#ifdef USE_JOINT_DAMPING
+          /*******************************************************/
+          /*  allocate space for damped joint Jacobians          */
+          /*******************************************************/
+          if (jicurr->joint->use_damping)
+          {
+            // damping coefficient is in jicurr->info.damping_coefficient);
+            coeff_damp[ofsi_damp] = jicurr->joint->damping_coefficient;
+
+            // setup joint damping pointers so getinfo2 will fill in J_damp
+            dReal *const Jrow_damp = J_damp + ofsi_damp * 12;
+            Jinfo.J1ld = Jrow_damp;
+            Jinfo.J1ad = Jrow_damp + 3;
+            Jinfo.J2ld = Jrow_damp + 6;
+            Jinfo.J2ad = Jrow_damp + 9;
+            // one row of constraint per joint
+            ofsi_damp ++;
+          }
+#endif
+ 
           dxJoint *joint = jicurr->joint;
           joint->getInfo2 (&Jinfo);
           
@@ -868,6 +929,24 @@
     nj = njcurr; m = mcurr;
   }
 
+#ifdef USE_JOINT_DAMPING
+  int m_damp;
+  {
+    int m_dampcurr = 0;
+    dxJoint::SureMaxInfo info;
+    dxJoint *const *const _jend = _joint + _nj;
+    for (dxJoint *const *_jcurr = _joint; _jcurr != _jend; _jcurr++) {
+      dxJoint *j = *_jcurr;
+      /***************************/
+      /* size for damping joints */
+      /***************************/
+      if (j->use_damping)
+        m_dampcurr ++;
+    }
+    m_damp = m_dampcurr;
+  }
+#endif
+
   size_t res = 0;
 
   res += dEFFICIENT_SIZE(sizeof(dReal) * 3 * 4 * nb); // for invI
@@ -884,6 +963,10 @@
       sub1_res2 += dEFFICIENT_SIZE(sizeof(dReal) * mskip * m); // for A
       sub1_res2 += 3 * dEFFICIENT_SIZE(sizeof(dReal) * m); // for lo, hi, rhs
       sub1_res2 += dEFFICIENT_SIZE(sizeof(int) * m); // for findex
+#ifdef USE_JOINT_DAMPING
+      sub1_res2 += dEFFICIENT_SIZE(sizeof(dReal) * 12 * m_damp); // for J_damp
+      sub1_res2 += dEFFICIENT_SIZE(sizeof(dReal) * m_damp); // for coeff_damp
+#endif
       {
         size_t sub2_res1 = dEFFICIENT_SIZE(sizeof(dReal) * m); // for cfm
         sub2_res1 += dEFFICIENT_SIZE(sizeof(dReal) * 2 * 8 * m); // for JinvM
