Index: include/ode/objects.h
===================================================================
--- include/ode/objects.h	(revision 1798)
+++ include/ode/objects.h	(working copy)
@@ -1635,6 +1635,14 @@
 ODE_API dJointID dJointCreateSlider (dWorldID, dJointGroupID);
 
 /**
+ * @brief Create a new joint of the screw type.
+ * @ingroup joints
+ * @param dJointGroupID set to 0 to allocate the joint normally.
+ * If it is nonzero the joint is allocated in the given joint group.
+ */
+ODE_API dJointID dJointCreateScrew (dWorldID, dJointGroupID);
+
+/**
  * @brief Create a new joint of the contact type.
  * @ingroup joints
  * @param dJointGroupID set to 0 to allocate the joint normally.
@@ -1821,6 +1829,7 @@
  * \li dJointTypeBall
  * \li dJointTypeHinge
  * \li dJointTypeSlider
+ * \li dJointTypeScrew
  * \li dJointTypeContact
  * \li dJointTypeUniversal
  * \li dJointTypeHinge2
@@ -1971,6 +1980,34 @@
 ODE_API void dJointAddSliderForce(dJointID joint, dReal force);
 
 /**
+ * @brief set the joint axis
+ * @ingroup joints
+ */
+ODE_API void dJointSetScrewAxis (dJointID, dReal x, dReal y, dReal z);
+
+/**
+ * @ingroup joints
+ */
+ODE_API void dJointSetScrewAxisDelta (dJointID, dReal x, dReal y, dReal z, dReal ax, dReal ay, dReal az);
+
+/**
+ * @brief set joint parameter
+ * @ingroup joints
+ */
+ODE_API void dJointSetScrewParam (dJointID, int parameter, dReal value);
+
+/**
+ * @brief Applies the given force in the screw's direction.
+ *
+ * That is, it applies a force with specified magnitude, in the direction of
+ * screw's axis, to body1, and with the same magnitude but opposite
+ * direction to body2.  This function is just a wrapper for dBodyAddForce().
+ * @ingroup joints
+ */
+ODE_API void dJointAddScrewForce(dJointID joint, dReal force);
+ODE_API void dJointAddScrewTorque(dJointID joint, dReal torque);
+
+/**
  * @brief set anchor
  * @ingroup joints
  */
@@ -2538,6 +2575,39 @@
 ODE_API dReal dJointGetSliderParam (dJointID, int parameter);
 
 /**
+ * @brief Get the screw linear position (i.e. the screw's extension)
+ *
+ * When the axis is set, the current position of the attached bodies is
+ * examined and that position will be the zero position.
+
+ * The position is the distance, with respect to the zero position,
+ * along the screw axis of body 1 with respect to
+ * body 2. (A NULL body is replaced by the world).
+ * @ingroup joints
+ */
+ODE_API dReal dJointGetScrewPosition (dJointID);
+ODE_API dReal dJointGetScrewAngle (dJointID);
+
+/**
+ * @brief Get the screw linear position's time derivative.
+ * @ingroup joints
+ */
+ODE_API dReal dJointGetScrewPositionRate (dJointID);
+ODE_API dReal dJointGetScrewAngleRate (dJointID);
+
+/**
+ * @brief Get the screw axis
+ * @ingroup joints
+ */
+ODE_API void dJointGetScrewAxis (dJointID, dVector3 result);
+
+/**
+ * @brief get joint parameter
+ * @ingroup joints
+ */
+ODE_API dReal dJointGetScrewParam (dJointID, int parameter);
+
+/**
  * @brief Get the joint anchor point, in world coordinates.
  * @return the point on body 1.  If the joint is perfectly satisfied,
  * this will be the same as the point on body 2.
Index: include/ode/odecpp.h
===================================================================
--- include/ode/odecpp.h	(revision 1798)
+++ include/ode/odecpp.h	(working copy)
@@ -730,6 +730,58 @@
 
 
 template <class dJointTemplateBase, class dWorldTemplateBase, class dBodyTemplateBase>
+class dScrewJointTemplate : public dJointTemplate<dJointTemplateBase, dWorldTemplateBase, dBodyTemplateBase> {
+private:
+  // intentionally undefined, don't use these
+  dScrewJointTemplate (const dScrewJointTemplate<dJointTemplateBase, dWorldTemplateBase, dBodyTemplateBase> &);
+  void operator = (const dScrewJointTemplate<dJointTemplateBase, dWorldTemplateBase, dBodyTemplateBase> &);
+
+protected:
+  typedef dJointTemplate<dJointTemplateBase, dWorldTemplateBase, dBodyTemplateBase> dBaseTemplate;
+
+  dJointID get_id() const { return dBaseTemplate::get_id(); }
+  void set_id(dJointID value) { dBaseTemplate::set_id(value); }
+
+  void destroy() { dBaseTemplate::destroy(); }
+
+public:
+  dScrewJointTemplate() { }
+  dScrewJointTemplate (dWorldID world, dJointGroupID group=0)
+    { set_id(dJointCreateScrew(world, group)); }
+  dScrewJointTemplate (dWorldTemplate<dWorldTemplateBase>& world, dJointGroupID group=0)
+    { set_id(dJointCreateScrew(world.id(), group)); }
+
+  void create (dWorldID world, dJointGroupID group=0) {
+    destroy();
+    set_id(dJointCreateScrew(world, group));
+  }
+  void create (dWorldTemplate<dWorldTemplateBase>& world, dJointGroupID group=0)
+    { create(world.id(), group); }
+
+  void setAxis (dReal x, dReal y, dReal z)
+    { dJointSetScrewAxis (get_id(), x, y, z); }
+  void setAxis (const dVector3 a)
+    { setAxis (a[0], a[1], a[2]); }
+  void getAxis (dVector3 result) const
+    { dJointGetScrewAxis (get_id(), result); }
+
+  dReal getPosition() const
+    { return dJointGetScrewPosition (get_id()); }
+  dReal getPositionRate() const
+    { return dJointGetScrewPositionRate (get_id()); }
+
+  virtual void setParam (int parameter, dReal value)
+    { dJointSetScrewParam (get_id(), parameter, value); }
+  virtual dReal getParam (int parameter) const
+    { return dJointGetScrewParam (get_id(), parameter); }
+  // TODO: expose params through methods
+
+  void addForce (dReal force)
+	{ dJointAddScrewForce(get_id(), force); }
+};
+
+
+template <class dJointTemplateBase, class dWorldTemplateBase, class dBodyTemplateBase>
 class dUniversalJointTemplate : public dJointTemplate<dJointTemplateBase, dWorldTemplateBase, dBodyTemplateBase> {
 private:
   // intentionally undefined, don't use these
@@ -1337,6 +1389,7 @@
 typedef dBallJointTemplate<dODECPP_JOINT_TEMPLATE_BASE, dODECPP_WORLD_TEMPLATE_BASE, dODECPP_BODY_TEMPLATE_BASE> dBallJoint;
 typedef dHingeJointTemplate<dODECPP_JOINT_TEMPLATE_BASE, dODECPP_WORLD_TEMPLATE_BASE, dODECPP_BODY_TEMPLATE_BASE> dHingeJoint;
 typedef dSliderJointTemplate<dODECPP_JOINT_TEMPLATE_BASE, dODECPP_WORLD_TEMPLATE_BASE, dODECPP_BODY_TEMPLATE_BASE> dSliderJoint;
+typedef dScrewJointTemplate<dODECPP_JOINT_TEMPLATE_BASE, dODECPP_WORLD_TEMPLATE_BASE, dODECPP_BODY_TEMPLATE_BASE> dScrewJoint;
 typedef dUniversalJointTemplate<dODECPP_JOINT_TEMPLATE_BASE, dODECPP_WORLD_TEMPLATE_BASE, dODECPP_BODY_TEMPLATE_BASE> dUniversalJoint;
 typedef dHinge2JointTemplate<dODECPP_JOINT_TEMPLATE_BASE, dODECPP_WORLD_TEMPLATE_BASE, dODECPP_BODY_TEMPLATE_BASE> dHinge2Joint;
 typedef dPRJointTemplate<dODECPP_JOINT_TEMPLATE_BASE, dODECPP_WORLD_TEMPLATE_BASE, dODECPP_BODY_TEMPLATE_BASE> dPRJoint;
Index: include/ode/common.h
===================================================================
--- include/ode/common.h	(revision 1798)
+++ include/ode/common.h	(working copy)
@@ -245,6 +245,7 @@
   dJointTypeNone = 0,		/* or "unknown" */
   dJointTypeBall,
   dJointTypeHinge,
+  dJointTypeScrew,
   dJointTypeSlider,
   dJointTypeContact,
   dJointTypeUniversal,
Index: ode/src/quickstep.cpp
===================================================================
--- ode/src/quickstep.cpp	(revision 1798)
+++ ode/src/quickstep.cpp	(working copy)
@@ -400,6 +400,7 @@
   dRealPtr        JiM          = tmpRealPtr[4];
   dRealPtr        invI         = tmpRealPtr[5];
   dRealPtr        coeff_damp   = tmpRealPtr[6];
+  dRealPtr        JiMratio     = tmpRealPtr[7];
   dRealMutablePtr b            = tmpMutablePtr[0];
   dRealMutablePtr J            = tmpMutablePtr[1];
   dRealMutablePtr fc           = tmpMutablePtr[2];
@@ -812,6 +813,7 @@
   const int m_damp,dRealMutablePtr J_damp, dRealPtr coeff_damp, int *jb_damp,dRealMutablePtr v_damp,
   dRealMutablePtr f_damp,dRealMutablePtr v_joint_damp, dRealPtr JiM, // damping related
 #endif
+  dRealPtr JiMratio,
 #ifdef USE_TPROW
   boost::threadpool::pool* row_threadpool,
 #endif
@@ -939,7 +941,7 @@
   dReal tmpReal[tmpReal_size*num_chunks];
   int tmpIntPtr_size = 3;
   const int* tmpIntPtr[tmpIntPtr_size*num_chunks];
-  int tmpRealPtr_size = 7;
+  int tmpRealPtr_size = 8;
   dRealPtr tmpRealPtr[tmpRealPtr_size*num_chunks];
   int tmpMutablePtr_size = 12;
   dRealMutablePtr tmpMutablePtr[tmpMutablePtr_size*num_chunks];
@@ -989,6 +991,7 @@
     tmpRealPtr[4+thread_id*tmpRealPtr_size] = JiM;
     tmpRealPtr[5+thread_id*tmpRealPtr_size] = invI;
     tmpRealPtr[6+thread_id*tmpRealPtr_size] = coeff_damp ;
+    tmpRealPtr[7+thread_id*tmpRealPtr_size] = JiMratio;
     tmpMutablePtr[0+thread_id*tmpMutablePtr_size] = b;
     tmpMutablePtr[1+thread_id*tmpMutablePtr_size] = J;
     tmpMutablePtr[2+thread_id*tmpMutablePtr_size] = fc;
@@ -1217,6 +1220,7 @@
   dReal *v_joint_damp = NULL;
   dReal* f_damp = NULL;
   dReal *JiM = NULL;
+  dReal *JiMratio = NULL;
   int *jb_damp = NULL;
   dReal *coeff_damp = NULL;
 #endif
@@ -1258,6 +1262,11 @@
       JiM = context->AllocateArray<dReal> (mlocal*12); // for computing b_damp
       dSetZero (JiM,jelements);
 #endif
+      // JiMratio is the element-wise maximum ratio between
+      //   Ja*inv(Ma) and Jb*inv(Mb) for a joint
+      // if the joint is one sided, then we preset it to 1
+      JiMratio = context->AllocateArray<dReal> (mlocal); // for computing b_damp
+      dSetZero (JiMratio,mlocal);
     }
 
 #ifdef USE_JOINT_DAMPING
@@ -1469,6 +1478,7 @@
         {
           dRealPtr J_ptr = J;
           dRealMutablePtr JiM_ptr = JiM; // intermediate solution storage
+          dRealMutablePtr JiMratio_ptr = JiMratio; // intermediate solution storage
           for (int i=0; i<m;J_ptr+=12,JiM_ptr+=12, i++) {
 
             // compute JiM = J * invM
@@ -1484,11 +1494,23 @@
               JiM_ptr[3+j] += J_ptr[3+k]*invI_ptr1[k*4+j];
             }
 
+            // preset JiMratio to 1
+            JiMratio_ptr[0] = 1.0;
+
             if (b2 >= 0){
               dReal k2 = body[b2]->invMass;
               for (int j=0; j<3 ; j++) JiM_ptr[j+6] += k2*J_ptr[j+6];
               const dReal *invI_ptr2 = invI + 12*b2;
               for (int j=0;j<3;j++) for (int k=0;k<3;k++) JiM_ptr[9+j] += J_ptr[9+k]*invI_ptr2[k*4+j];
+
+              // check element-wise ratio for JiMratio
+              JiMratio_ptr[0] = 1.0;
+              for (int j=0;j<3;j++) {
+                if  (JiM_ptr[  j] != 0) JiMratio_ptr[0] = std::max(JiMratio_ptr[0],JiM_ptr[6+j]/JiM_ptr[  j]);
+                if  (JiM_ptr[3+j] != 0) JiMratio_ptr[0] = std::max(JiMratio_ptr[0],JiM_ptr[9+j]/JiM_ptr[3+j]);
+                if  (JiM_ptr[6+j] != 0) JiMratio_ptr[0] = std::max(JiMratio_ptr[0],JiM_ptr[  j]/JiM_ptr[6+j]);
+                if  (JiM_ptr[9+j] != 0) JiMratio_ptr[0] = std::max(JiMratio_ptr[0],JiM_ptr[3+j]/JiM_ptr[9+j]);
+              }
             }
           }
         }
@@ -1555,6 +1577,7 @@
 #ifdef USE_JOINT_DAMPING
                m_damp,J_damp,coeff_damp,jb_damp,v_damp,f_damp,v_joint_damp,JiM,
 #endif
+               JiMratio,
 #ifdef USE_TPROW
                world->row_threadpool,
 #endif
@@ -1829,6 +1852,7 @@
       sub1_res2 += dEFFICIENT_SIZE(sizeof(int) * 2 * m_damp); // for jb_damp            FIXME: shoulbe be 2 not 12?
       sub1_res2 += dEFFICIENT_SIZE(sizeof(dReal) * 6 * nb); // for f_damp
       sub1_res2 += dEFFICIENT_SIZE(sizeof(dReal) * 12*m); // for JiM
+      sub1_res2 += dEFFICIENT_SIZE(sizeof(dReal) * m); // for JiMratio
       sub1_res2 += dEFFICIENT_SIZE(sizeof(dReal) * 6 * nb); // for v_damp
       sub1_res2 += dEFFICIENT_SIZE(sizeof(dReal) * m_damp); // for coeff_damp
 #endif
Index: ode/src/joints/joints.h
===================================================================
--- ode/src/joints/joints.h	(revision 1798)
+++ ode/src/joints/joints.h	(working copy)
@@ -30,6 +30,7 @@
 #include "ball.h"
 #include "hinge.h"
 #include "slider.h"
+#include "screw.h"
 #include "contact.h"
 #include "universal.h"
 #include "hinge2.h"
Index: ode/src/joints/screw.cpp
===================================================================
--- ode/src/joints/screw.cpp	(revision 0)
+++ ode/src/joints/screw.cpp	(revision 0)
@@ -0,0 +1,691 @@
+/*************************************************************************
+ *                                                                       *
+ * Open Dynamics Engine, Copyright (C) 2001,2002 Russell L. Smith.       *
+ * All rights reserved.  Email: russ@q12.org   Web: www.q12.org          *
+ *                                                                       *
+ * This library is free software; you can redistribute it and/or         *
+ * modify it under the terms of EITHER:                                  *
+ *   (1) The GNU Lesser General Public License as published by the Free  *
+ *       Software Foundation; either version 2.1 of the License, or (at  *
+ *       your option) any later version. The text of the GNU Lesser      *
+ *       General Public License is included with this library in the     *
+ *       file LICENSE.TXT.                                               *
+ *   (2) The BSD-style license that is included with this library in     *
+ *       the file LICENSE-BSD.TXT.                                       *
+ *                                                                       *
+ * This library is distributed in the hope that it will be useful,       *
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of        *
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the files    *
+ * LICENSE.TXT and LICENSE-BSD.TXT for more details.                     *
+ *                                                                       *
+ *************************************************************************/
+
+
+#include "config.h"
+#include "screw.h"
+#include "joint_internal.h"
+
+//****************************************************************************
+// helper function: shortest_angular_distance implementation
+    
+  /*!
+   * \brief normalize_angle_positive
+   *
+   *        Normalizes the angle to be 0 to 2*M_PI
+   *        It takes and returns radians.
+   */
+  static inline double normalize_angle_positive(double angle)
+  {
+    return fmod(fmod(angle, 2.0*M_PI) + 2.0*M_PI, 2.0*M_PI);
+  }
+
+
+  /*!
+   * \brief normalize
+   *
+   * Normalizes the angle to be -M_PI circle to +M_PI circle
+   * It takes and returns radians.
+   *
+   */    
+  static inline double normalize_angle(double angle)
+  {
+    double a = normalize_angle_positive(angle);
+    if (a > M_PI)
+      a -= 2.0 *M_PI;
+    return a;
+  }
+
+    
+  /*!
+   * \function
+   * \brief shortest_angular_distance
+   *
+   * Given 2 angles, this returns the shortest angular
+   * difference.  The inputs and ouputs are of course radians.
+   *
+   * The result
+   * would always be -pi <= result <= pi.  Adding the result
+   * to "from" will always get you an equivelent angle to "to".
+   */
+    
+  static inline double shortest_angular_distance(double from, double to)
+  {
+    double result = normalize_angle_positive(normalize_angle_positive(to) - normalize_angle_positive(from));
+	
+    if (result > M_PI)
+      // If the result > 180,
+      // It's shorter the other way.
+      result = -(2.0*M_PI - result);
+	
+    return normalize_angle(result);
+  }
+
+
+
+//****************************************************************************
+// screw
+
+dxJointScrew::dxJointScrew( dxWorld *w ) :
+        dxJoint( w )
+{
+    dSetZero( anchor1, 4 );
+    dSetZero( anchor2, 4 );
+    dSetZero( axis1, 4 );
+    axis1[0] = 1;
+    dSetZero( axis2, 4 );
+    axis2[0] = 1;
+    dSetZero( qrel, 4 );
+    limot.init( world );
+    cumulative_angle = 0;
+}
+
+
+void 
+dxJointScrew::getSureMaxInfo( SureMaxInfo* info )
+{
+    info->max_m = 6;
+}
+
+
+void
+dxJointScrew::getInfo1( dxJoint::Info1 *info )
+{
+    info->nub = 6;
+
+    info->m = 6;
+
+/* comment out joint limits for now, add back later after verifying continuous is working
+    // if proper joint limits are specified
+    // see if we're at a joint limit for the rotational hinge
+    if ( limot.lostop <= limot.histop )
+    {
+        dReal angle = getHingeAngle( node[0].body,
+                                     node[1].body,
+                                     axis1, qrel );
+        // from angle, update cumulative_angle, which does not wrap
+        cumulative_angle = cumulative_angle + shortest_angular_distance(cumulative_angle,angle);
+
+        if ( limot.testRotationalLimit( cumulative_angle ) )
+            info->m = 6;
+    }
+
+    // see if we're at a joint limit for the slider
+    limot.limit = 0;
+    if ( ( limot.lostop > -dInfinity || limot.histop < dInfinity ) &&
+            limot.lostop <= limot.histop )
+    {
+        // measure joint position
+        dReal pos = dJointGetScrewPosition ( this );
+        if ( pos <= limot.lostop )
+        {
+            limot.limit = 1;
+            limot.limit_err = pos - limot.lostop;
+            info->m = 6;
+        }
+        else if ( pos >= limot.histop )
+        {
+            limot.limit = 2;
+            limot.limit_err = pos - limot.histop;
+            info->m = 6;
+        }
+    }
+*/
+
+}
+
+
+void
+dxJointScrew::getInfo2( dxJoint::Info2 *info )
+{
+    // set the constraint on the two sliding axis
+    {
+      // pull out pos and R for both bodies. also get the `connection'
+      // vector pos2-pos1.
+
+      int i;
+      dReal *pos1, *pos2, *R1, *R2;
+      dVector3 c;
+      pos1 = node[0].body->posr.pos;
+      R1 = node[0].body->posr.R;
+      if ( node[1].body )
+      {
+          pos2 = node[1].body->posr.pos;
+          R2 = node[1].body->posr.R;
+          for ( i = 0; i < 3; i++ )
+              c[i] = pos2[i] - pos1[i];
+      }
+      else
+      {
+          pos2 = 0;
+          R2 = 0;
+      }
+
+      int s0 = 0 * info->rowskip;
+      int s1 = 1 * info->rowskip;
+      // remaining two rows. we want: vel2 = vel1 + w1 x c ... but this would
+      // result in three equations, so we project along the planespace vectors
+      // so that sliding along the slider axis is disregarded. for symmetry we
+      // also substitute (w1+w2)/2 for w1, as w1 is supposed to equal w2.
+
+      dVector3 ax1; // joint axis in global coordinates (unit length)
+      dVector3 p, q; // plane space of ax1
+      dMultiply0_331 ( ax1, R1, axis1 );
+      dPlaneSpace ( ax1, p, q );
+      if ( node[1].body )
+      {
+          dVector3 tmp;
+          dCalcVectorCross3( tmp, c, p );
+          dScaleVector3( tmp, REAL( 0.5 ));
+          for ( i = 0; i < 3; i++ ) info->J1a[s0+i] = tmp[i];
+          for ( i = 0; i < 3; i++ ) info->J2a[s0+i] = tmp[i];
+          dCalcVectorCross3( tmp, c, q );
+          dScaleVector3( tmp, REAL( 0.5 ));
+          for ( i = 0; i < 3; i++ ) info->J1a[s1+i] = tmp[i];
+          for ( i = 0; i < 3; i++ ) info->J2a[s1+i] = tmp[i];
+          for ( i = 0; i < 3; i++ ) info->J2l[s0+i] = -p[i];
+          for ( i = 0; i < 3; i++ ) info->J2l[s1+i] = -q[i];
+      }
+      for ( i = 0; i < 3; i++ ) info->J1l[s0+i] = p[i];
+      for ( i = 0; i < 3; i++ ) info->J1l[s1+i] = q[i];
+
+      // compute last two elements of right hand side. we want to align the offset
+      // point (in body 2's frame) with the center of body 1.
+      dReal k = info->fps * info->erp;
+      if ( node[1].body )
+      {
+          dVector3 ofs;  // offset point in global coordinates
+          dMultiply0_331 ( ofs, R2, offset );
+          for ( i = 0; i < 3; i++ ) c[i] += ofs[i];
+          info->c[1] = k * dCalcVectorDot3 ( p, c );
+          info->c[2] = k * dCalcVectorDot3 ( q, c );
+      }
+      else
+      {
+          dVector3 ofs;  // offset point in global coordinates
+          for ( i = 0; i < 3; i++ ) ofs[i] = offset[i] - pos1[i];
+          info->c[1] = k * dCalcVectorDot3 ( p, ofs );
+          info->c[2] = k * dCalcVectorDot3 ( q, ofs );
+
+          if ( flags & dJOINT_REVERSE )
+              for ( i = 0; i < 3; ++i ) ax1[i] = -ax1[i];
+      }
+
+      // if the slider is powered, or has joint limits, add in the extra row
+      // limot.addLimot ( this, info, 5, ax1, 0 ); // comment out as this will be the screw constraint
+
+      // joint damping
+      if (this->use_damping)
+      {
+        // added J1ld and J2ld for damping, only 1 row
+        info->J1ld[0] = ax1[0];
+        info->J1ld[1] = ax1[1];
+        info->J1ld[2] = ax1[2];
+        if ( this->node[1].body )
+        {
+          info->J2ld[0] = -ax1[0];
+          info->J2ld[1] = -ax1[1];
+          info->J2ld[2] = -ax1[2];
+        }
+        // there's no rhs for damping setup, all we want to use is the jacobian information above
+      }
+    }
+
+    // constrain the hinge like DOFs
+    {
+      // set the two hinge rows. the hinge axis should be the only unconstrained
+      // rotational axis, the angular velocity of the two bodies perpendicular to
+      // the hinge axis should be equal. thus the constraint equations are
+      //    p*w1 - p*w2 = 0
+      //    q*w1 - q*w2 = 0
+      // where p and q are unit vectors normal to the hinge axis, and w1 and w2
+      // are the angular velocity vectors of the two bodies.
+
+      dVector3 ax1;  // length 1 joint axis in global coordinates, from 1st body
+      dVector3 p, q; // plane space vectors for ax1
+      dMultiply0_331( ax1, node[0].body->posr.R, axis1 );
+      dPlaneSpace( ax1, p, q );
+
+      int s3 = 3 * info->rowskip;
+      int s4 = 4 * info->rowskip;
+
+      info->J1a[s3+0] = p[0];
+      info->J1a[s3+1] = p[1];
+      info->J1a[s3+2] = p[2];
+      info->J1a[s4+0] = q[0];
+      info->J1a[s4+1] = q[1];
+      info->J1a[s4+2] = q[2];
+
+      if ( node[1].body )
+      {
+          info->J2a[s3+0] = -p[0];
+          info->J2a[s3+1] = -p[1];
+          info->J2a[s3+2] = -p[2];
+          info->J2a[s4+0] = -q[0];
+          info->J2a[s4+1] = -q[1];
+          info->J2a[s4+2] = -q[2];
+      }
+
+      // compute the right hand side of the constraint equation. set relative
+      // body velocities along p and q to bring the screw back into alignment.
+      // if ax1,ax2 are the unit length screw axes as computed from body1 and
+      // body2, we need to rotate both bodies along the axis u = (ax1 x ax2).
+      // if `theta' is the angle between ax1 and ax2, we need an angular velocity
+      // along u to cover angle erp*theta in one step :
+      //   |angular_velocity| = angle/time = erp*theta / stepsize
+      //                      = (erp*fps) * theta
+      //    angular_velocity  = |angular_velocity| * (ax1 x ax2) / |ax1 x ax2|
+      //                      = (erp*fps) * theta * (ax1 x ax2) / sin(theta)
+      // ...as ax1 and ax2 are unit length. if theta is smallish,
+      // theta ~= sin(theta), so
+      //    angular_velocity  = (erp*fps) * (ax1 x ax2)
+      // ax1 x ax2 is in the plane space of ax1, so we project the angular
+      // velocity to p and q to find the right hand side.
+
+      dVector3 ax2, b;
+      if ( node[1].body )
+      {
+          dMultiply0_331( ax2, node[1].body->posr.R, axis2 );
+      }
+      else
+      {
+          ax2[0] = axis2[0];
+          ax2[1] = axis2[1];
+          ax2[2] = axis2[2];
+      }
+      dCalcVectorCross3( b, ax1, ax2 );
+      dReal k = info->fps * info->erp;
+      info->c[3] = k * dCalcVectorDot3( b, p );
+      info->c[4] = k * dCalcVectorDot3( b, q );
+
+      // if the screw is powered, or has joint limits, add in the stuff
+      //limot.addLimot( this, info, 5, ax1, 1 ); // comment out as this will be the screw constraint
+
+      // joint damping
+      if (this->use_damping)
+      {
+        // added J1ad and J2ad for damping, only 1 row
+        info->J1ad[0] = ax1[0];
+        info->J1ad[1] = ax1[1];
+        info->J1ad[2] = ax1[2];
+        if ( this->node[1].body )
+        {
+          info->J2ad[0] = -ax1[0];
+          info->J2ad[1] = -ax1[1];
+          info->J2ad[2] = -ax1[2];
+        }
+        // there's no rhs for damping setup, all we want to use is the jacobian information above
+      }
+    }
+}
+
+
+
+void dJointSetScrewAnchor( dJointID j, dReal x, dReal y, dReal z )
+{
+    dxJointScrew* joint = ( dxJointScrew* )j;
+    dUASSERT( joint, "bad joint argument" );
+    checktype( joint, Screw );
+    setAnchors( joint, x, y, z, joint->anchor1, joint->anchor2 );
+    joint->computeInitialRelativeRotation();
+}
+
+
+void dJointSetScrewAnchorDelta( dJointID j, dReal x, dReal y, dReal z, dReal dx, dReal dy, dReal dz )
+{
+    dxJointScrew* joint = ( dxJointScrew* )j;
+    dUASSERT( joint, "bad joint argument" );
+    checktype( joint, Screw );
+
+    if ( joint->node[0].body )
+    {
+        dReal q[4];
+        q[0] = x - joint->node[0].body->posr.pos[0];
+        q[1] = y - joint->node[0].body->posr.pos[1];
+        q[2] = z - joint->node[0].body->posr.pos[2];
+        q[3] = 0;
+        dMultiply1_331( joint->anchor1, joint->node[0].body->posr.R, q );
+
+        if ( joint->node[1].body )
+        {
+            q[0] = x - joint->node[1].body->posr.pos[0];
+            q[1] = y - joint->node[1].body->posr.pos[1];
+            q[2] = z - joint->node[1].body->posr.pos[2];
+            q[3] = 0;
+            dMultiply1_331( joint->anchor2, joint->node[1].body->posr.R, q );
+        }
+        else
+        {
+            // Move the relative displacement between the passive body and the
+            //  anchor in the same direction as the passive body has just moved
+            joint->anchor2[0] = x + dx;
+            joint->anchor2[1] = y + dy;
+            joint->anchor2[2] = z + dz;
+        }
+    }
+    joint->anchor1[3] = 0;
+    joint->anchor2[3] = 0;
+
+    joint->computeInitialRelativeRotation();
+}
+
+
+
+void dJointSetScrewAxis( dJointID j, dReal x, dReal y, dReal z )
+{
+    dxJointScrew* joint = ( dxJointScrew* )j;
+    dUASSERT( joint, "bad joint argument" );
+    checktype( joint, Screw );
+    setAxes( joint, x, y, z, joint->axis1, joint->axis2 );
+    joint->computeInitialRelativeRotation();
+}
+
+
+void dJointSetScrewAxisOffset( dJointID j, dReal x, dReal y, dReal z, dReal dangle )
+{
+    dxJointScrew* joint = ( dxJointScrew* )j;
+    dUASSERT( joint, "bad joint argument" );
+    checktype( joint, Screw );
+    setAxes( joint, x, y, z, joint->axis1, joint->axis2 );
+    joint->computeInitialRelativeRotation();
+
+    if ( joint->flags & dJOINT_REVERSE ) dangle = -dangle;
+
+    dQuaternion qAngle, qOffset;
+    dQFromAxisAndAngle(qAngle, x, y, z, dangle);
+    dQMultiply3(qOffset, qAngle, joint->qrel);
+    joint->qrel[0] = qOffset[0];
+    joint->qrel[1] = qOffset[1];
+    joint->qrel[2] = qOffset[2];
+    joint->qrel[3] = qOffset[3];
+}
+
+
+
+void dJointGetScrewAnchor( dJointID j, dVector3 result )
+{
+    dxJointScrew* joint = ( dxJointScrew* )j;
+    dUASSERT( joint, "bad joint argument" );
+    dUASSERT( result, "bad result argument" );
+    checktype( joint, Screw );
+    if ( joint->flags & dJOINT_REVERSE )
+        getAnchor2( joint, result, joint->anchor2 );
+    else
+        getAnchor( joint, result, joint->anchor1 );
+}
+
+
+void dJointGetScrewAnchor2( dJointID j, dVector3 result )
+{
+    dxJointScrew* joint = ( dxJointScrew* )j;
+    dUASSERT( joint, "bad joint argument" );
+    dUASSERT( result, "bad result argument" );
+    checktype( joint, Screw );
+    if ( joint->flags & dJOINT_REVERSE )
+        getAnchor( joint, result, joint->anchor1 );
+    else
+        getAnchor2( joint, result, joint->anchor2 );
+}
+
+
+void dJointGetScrewAxis( dJointID j, dVector3 result )
+{
+    dxJointScrew* joint = ( dxJointScrew* )j;
+    dUASSERT( joint, "bad joint argument" );
+    dUASSERT( result, "bad result argument" );
+    checktype( joint, Screw );
+    getAxis( joint, result, joint->axis1 );
+}
+
+
+void dJointSetScrewParam( dJointID j, int parameter, dReal value )
+{
+    dxJointScrew* joint = ( dxJointScrew* )j;
+    dUASSERT( joint, "bad joint argument" );
+    checktype( joint, Screw );
+    joint->limot.set( parameter, value );
+}
+
+
+dReal dJointGetScrewParam( dJointID j, int parameter )
+{
+    dxJointScrew* joint = ( dxJointScrew* )j;
+    dUASSERT( joint, "bad joint argument" );
+    checktype( joint, Screw );
+    return joint->limot.get( parameter );
+}
+
+
+dReal dJointGetScrewAngle( dJointID j )
+{
+    dxJointScrew* joint = ( dxJointScrew* )j;
+    dAASSERT( joint );
+    checktype( joint, Screw );
+    if ( joint->node[0].body )
+    {
+        dReal ang = getHingeAngle( joint->node[0].body,
+                                   joint->node[1].body,
+                                   joint->axis1,
+                                   joint->qrel );
+        // from angle, update cumulative_angle, which does not wrap
+        joint->cumulative_angle = joint->cumulative_angle + shortest_angular_distance(joint->cumulative_angle,ang);
+        if ( joint->flags & dJOINT_REVERSE )
+            return -joint->cumulative_angle;
+        else
+            return joint->cumulative_angle;
+    }
+    else return 0;
+}
+
+
+dReal dJointGetScrewAngleRate( dJointID j )
+{
+    dxJointScrew* joint = ( dxJointScrew* )j;
+    dAASSERT( joint );
+    checktype( joint, Screw );
+    if ( joint->node[0].body )
+    {
+        dVector3 axis;
+        dMultiply0_331( axis, joint->node[0].body->posr.R, joint->axis1 );
+        dReal rate = dCalcVectorDot3( axis, joint->node[0].body->avel );
+        if ( joint->node[1].body ) rate -= dCalcVectorDot3( axis, joint->node[1].body->avel );
+        if ( joint->flags & dJOINT_REVERSE ) rate = - rate;
+        return rate;
+    }
+    else return 0;
+}
+
+
+dReal dJointGetScrewPosition ( dJointID j )
+{
+    dxJointScrew* joint = ( dxJointScrew* ) j;
+    dUASSERT ( joint, "bad joint argument" );
+    checktype ( joint, Screw );
+
+    // get axis1 in global coordinates
+    dVector3 ax1, q;
+    dMultiply0_331 ( ax1, joint->node[0].body->posr.R, joint->axis1 );
+
+    if ( joint->node[1].body )
+    {
+        // get body2 + offset point in global coordinates
+        dMultiply0_331 ( q, joint->node[1].body->posr.R, joint->offset );
+        for ( int i = 0; i < 3; i++ )
+            q[i] = joint->node[0].body->posr.pos[i]
+                   - q[i]
+                   - joint->node[1].body->posr.pos[i];
+    }
+    else
+    {
+        q[0] = joint->node[0].body->posr.pos[0] - joint->offset[0];
+        q[1] = joint->node[0].body->posr.pos[1] - joint->offset[1];
+        q[2] = joint->node[0].body->posr.pos[2] - joint->offset[2];
+
+        if ( joint->flags & dJOINT_REVERSE )
+        {
+            // N.B. it could have been simplier to only inverse the sign of
+            //      the dCalcVectorDot3 result but this case is exceptional and doing
+            //      the check for all case can decrease the performance.
+            ax1[0] = -ax1[0];
+            ax1[1] = -ax1[1];
+            ax1[2] = -ax1[2];
+        }
+    }
+
+    return dCalcVectorDot3 ( ax1, q );
+}
+
+
+dReal dJointGetScrewPositionRate ( dJointID j )
+{
+    dxJointScrew* joint = ( dxJointScrew* ) j;
+    dUASSERT ( joint, "bad joint argument" );
+    checktype ( joint, Screw );
+
+    // get axis1 in global coordinates
+    dVector3 ax1;
+    dMultiply0_331 ( ax1, joint->node[0].body->posr.R, joint->axis1 );
+
+    if ( joint->node[1].body )
+    {
+        return dCalcVectorDot3 ( ax1, joint->node[0].body->lvel ) -
+               dCalcVectorDot3 ( ax1, joint->node[1].body->lvel );
+    }
+    else
+    {
+        dReal rate = dCalcVectorDot3 ( ax1, joint->node[0].body->lvel );
+        if ( joint->flags & dJOINT_REVERSE ) rate = - rate;
+        return rate;
+    }
+}
+
+void dJointAddScrewTorque( dJointID j, dReal torque )
+{
+    dxJointScrew* joint = ( dxJointScrew* )j;
+    dVector3 axis;
+    dAASSERT( joint );
+    checktype( joint, Screw );
+
+    if ( joint->flags & dJOINT_REVERSE )
+        torque = -torque;
+
+    getAxis( joint, axis, joint->axis1 );
+    axis[0] *= torque;
+    axis[1] *= torque;
+    axis[2] *= torque;
+
+    if ( joint->node[0].body != 0 )
+        dBodyAddTorque( joint->node[0].body, axis[0], axis[1], axis[2] );
+    if ( joint->node[1].body != 0 )
+        dBodyAddTorque( joint->node[1].body, -axis[0], -axis[1], -axis[2] );
+}
+
+void dJointAddScrewForce ( dJointID j, dReal force )
+{
+    dxJointScrew* joint = ( dxJointScrew* ) j;
+    dVector3 axis;
+    dUASSERT ( joint, "bad joint argument" );
+    checktype ( joint, Screw );
+
+    if ( joint->flags & dJOINT_REVERSE )
+        force -= force;
+
+    getAxis ( joint, axis, joint->axis1 );
+    axis[0] *= force;
+    axis[1] *= force;
+    axis[2] *= force;
+
+    if ( joint->node[0].body != 0 )
+        dBodyAddForce ( joint->node[0].body, axis[0], axis[1], axis[2] );
+    if ( joint->node[1].body != 0 )
+        dBodyAddForce ( joint->node[1].body, -axis[0], -axis[1], -axis[2] );
+
+    if ( joint->node[0].body != 0 && joint->node[1].body != 0 )
+    {
+        // linear torque decoupling:
+        // we have to compensate the torque, that this screw force may generate
+        // if body centers are not aligned along the screw axis
+
+        dVector3 ltd; // Linear Torque Decoupling vector (a torque)
+
+        dVector3 c;
+        c[0] = REAL ( 0.5 ) * ( joint->node[1].body->posr.pos[0] - joint->node[0].body->posr.pos[0] );
+        c[1] = REAL ( 0.5 ) * ( joint->node[1].body->posr.pos[1] - joint->node[0].body->posr.pos[1] );
+        c[2] = REAL ( 0.5 ) * ( joint->node[1].body->posr.pos[2] - joint->node[0].body->posr.pos[2] );
+        dCalcVectorCross3( ltd, c, axis );
+
+        dBodyAddTorque ( joint->node[0].body, ltd[0], ltd[1], ltd[2] );
+        dBodyAddTorque ( joint->node[1].body, ltd[0], ltd[1], ltd[2] );
+    }
+}
+
+
+
+dJointType
+dxJointScrew::type() const
+{
+    return dJointTypeScrew;
+}
+
+
+
+size_t
+dxJointScrew::size() const
+{
+    return sizeof( *this );
+}
+
+
+void
+dxJointScrew::setRelativeValues()
+{
+    dVector3 vec;
+    dJointGetScrewAnchor(this, vec);
+    setAnchors( this, vec[0], vec[1], vec[2], anchor1, anchor2 );
+
+    dJointGetScrewAxis(this, vec);
+    setAxes( this,  vec[0], vec[1], vec[2], axis1, axis2 );
+    computeInitialRelativeRotation();
+}
+
+
+/// Compute initial relative rotation body1 -> body2, or env -> body1
+void
+dxJointScrew::computeInitialRelativeRotation()
+{
+    if ( node[0].body )
+    {
+        if ( node[1].body )
+        {
+            dQMultiply1( qrel, node[0].body->q, node[1].body->q );
+        }
+        else
+        {
+            // set qrel to the transpose of the first body q
+            qrel[0] =  node[0].body->q[0];
+            qrel[1] = -node[0].body->q[1];
+            qrel[2] = -node[0].body->q[2];
+            qrel[3] = -node[0].body->q[3];
+        }
+    }
+}
+
Index: ode/src/joints/Makefile.am
===================================================================
--- ode/src/joints/Makefile.am	(revision 1798)
+++ ode/src/joints/Makefile.am	(working copy)
@@ -7,6 +7,7 @@
                         joint_internal.h \
                         ball.h ball.cpp \
                         hinge.h hinge.cpp \
+                        screw.h screw.cpp \
                         slider.h slider.cpp \
                         contact.h contact.cpp \
                         universal.h universal.cpp \
@@ -37,6 +38,7 @@
 				joint_internal.h \
 				joint.h \
 				hinge.h \
+				screw.h \
 				hinge2.h \
 				fixed.h \
 				contact.h \
Index: ode/src/joints/screw.h
===================================================================
--- ode/src/joints/screw.h	(revision 0)
+++ ode/src/joints/screw.h	(revision 0)
@@ -0,0 +1,56 @@
+/*************************************************************************
+ *                                                                       *
+ * Open Dynamics Engine, Copyright (C) 2001,2002 Russell L. Smith.       *
+ * All rights reserved.  Email: russ@q12.org   Web: www.q12.org          *
+ *                                                                       *
+ * This library is free software; you can redistribute it and/or         *
+ * modify it under the terms of EITHER:                                  *
+ *   (1) The GNU Lesser General Public License as published by the Free  *
+ *       Software Foundation; either version 2.1 of the License, or (at  *
+ *       your option) any later version. The text of the GNU Lesser      *
+ *       General Public License is included with this library in the     *
+ *       file LICENSE.TXT.                                               *
+ *   (2) The BSD-style license that is included with this library in     *
+ *       the file LICENSE-BSD.TXT.                                       *
+ *                                                                       *
+ * This library is distributed in the hope that it will be useful,       *
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of        *
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the files    *
+ * LICENSE.TXT and LICENSE-BSD.TXT for more details.                     *
+ *                                                                       *
+ *************************************************************************/
+
+#ifndef _ODE_JOINT_SCREW_H_
+#define _ODE_JOINT_SCREW_H_
+
+#include "joint.h"
+
+
+// screw
+
+struct dxJointScrew : public dxJoint
+{
+    dVector3 anchor1;   // anchor w.r.t first body
+    dVector3 anchor2;   // anchor w.r.t second body
+    dVector3 axis1;     // axis w.r.t first body
+    dVector3 axis2;     // axis w.r.t second body
+    dVector3 offset;    // point relative to body2 that should be // aligned with body1 center along axis1
+    dQuaternion qrel;   // initial relative rotation body1 -> body2
+    dxJointLimitMotor limot; // limit and motor information
+    dReal cumulative_angle; // save a cumulative angle so we can use larger then +/-pi limits
+
+    dxJointScrew( dxWorld *w );
+    virtual void getSureMaxInfo( SureMaxInfo* info );
+    virtual void getInfo1( Info1* info );
+    virtual void getInfo2( Info2* info );
+    virtual dJointType type() const;
+    virtual size_t size() const;
+
+    virtual void setRelativeValues();
+
+    void computeInitialRelativeRotation();
+};
+
+
+
+#endif
Index: ode/src/ode.cpp
===================================================================
--- ode/src/ode.cpp	(revision 1798)
+++ ode/src/ode.cpp	(working copy)
@@ -1218,7 +1218,13 @@
     return createJoint<dxJointSlider>(w,group);
 }
 
+dxJoint * dJointCreateScrew (dWorldID w, dJointGroupID group)
+{
+    dAASSERT (w);
+    return createJoint<dxJointScrew>(w,group);
+}
 
+
 dxJoint * dJointCreateContact (dWorldID w, dJointGroupID group,
 			       const dContact *c)
 {
